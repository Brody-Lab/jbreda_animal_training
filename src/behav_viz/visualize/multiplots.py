"""
Author: Jess Breda
Date: July 17, 2024
Description: functions to make multiplots that
can be shared across protocols.
"""

from behav_viz.visualize.plot_days_info import *
from behav_viz.visualize.plot_trials_info import *


def multiplot_spoke_lg(trials_df, save_out=False, save_path=None):
    """
    generate summary plot for spoke stages given a light guide (lg)
    curriculum. This works with both DMS2 and FixationGrower protocols

    params
    ------
    trials_df : DataFrame
        trials dataframe generated by create_trials_df() for a single
        animal on a single date with trials as row index
    save_out : bool (default=False)
        whether to save out the figure
    save_path : str (default=None)
        path to save the figure to
    """
    layout = """
        AAABC
        DDDEF
        GGGHI
        JJJKL
        MMMNN
    """
    fig = plt.figure(constrained_layout=True, figsize=(20, 20))

    plt.suptitle(
        f"\n{trials_df.animal_id.iloc[0]} on {trials_df.date.iloc[0]}\n",
        fontweight="semibold",
    )
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    # identify_axes(ax_dict) # prints the letter for id

    ## ROW 1
    plot_results(trials_df, ax=ax_dict["A"])
    plot_result_summary(trials_df, ax=ax_dict["B"])
    plot_watering_amounts(trials_df, ax=ax_dict["C"])

    ## ROW 2
    plot_correct_side(trials_df, ax=ax_dict["D"])
    plot_stage_info(trials_df, ax=ax_dict["D"])
    plot_side_bias_summary(trials_df, ax=ax_dict["E"])
    plot_side_count_summary(trials_df, ax=ax_dict["F"])

    ## ROW 3
    plot_performance_rates(trials_df, ax=ax_dict["G"])
    plot_first_spoke_summary_by_loc_and_result(trials_df, ax=ax_dict["H"])
    plot_first_spokes_summary_by_correct_side_and_loc(trials_df, ax=ax_dict["I"])

    ## ROW 4
    plot_npokes(trials_df, ax=ax_dict["J"])
    plot_npokes_summary(trials_df, ax=ax_dict["K"])
    plot_active_trial_dur_summary(trials_df, ax=ax_dict["L"])
    # plot L here

    ## ROW 5
    plot_trial_dur(trials_df, ax=ax_dict["M"])
    plot_give_info(trials_df, ax=ax_dict["N"])
    # plot P here

    if save_out:
        plt.savefig(save_path, bbox_inches="tight")
        plt.close("all")
    else:
        plt.show()

    return None
