"""
Author: Jess Breda
Date: July 22, 2024
Description: given days, trials table info make summary plots
for an animal for over days. Specifically for Fixation Grower protocol.
"""

import matplotlib.pyplot as plt

from behav_viz.visualize.plot_days_info import *
from behav_viz.visualize.plot_trials_info import *
import behav_viz.visualize.FixationGrower.plots as FG
from behav_viz.visualize.plots import *
from behav_viz.visualize import multiplots


from pathlib import Path

# Next step - get a multi plot frame work in here as outlined in git and then
# add the new raw/relative fix dur plot to the multiplot with other made plots
# then, done for the day

######################################################################################
#########                        SINGLE DAY PLOTS                            #########
######################################################################################


def single_day_summary(df, figures_path, save_out=True, overwrite=False):
    """
    function to plot summaries for each animal, day in a df of
    trials data

    df : pd.DataFrame
        df of trials data loaded in using `create_trials_df_from_dj`
    figures_path : Path object
        path to save figures to
    overwrite : bool (optional, default = False)
        whether to overwrite existing figures with same name
    """
    for (date, animal_id), sub_df in df.groupby(["date", "animal_id"]):
        # generate path & make plot if it doesn't exist or overwrite is on
        # TODO update logic here if fig dir structure changes
        fig_name = f"{animal_id}_{date}_day_summary.png"
        full_path = figures_path / fig_name

        if not Path.exists(full_path) or overwrite:
            print(f"making {fig_name[:-4]}")

            current_sma = sub_df.SMA_set.iloc[0]
            current_stage = sub_df.stage.iloc[0]

            if current_sma == "spoke":
                multiplots.multiplot_spoke_lg(
                    sub_df, save_out=save_out, save_path=full_path
                )

            elif current_sma == "cpoke":
                if current_stage >= 5:
                    multiplot_cpoke_learning(
                        sub_df, save_out=save_out, save_path=full_path
                    )


def multiplot_cpoke_learning(trials_df, save_out=False, save_path=None):
    """
    Generate a summary plot in the cpoke learning stages
    for a single animal on a single date. This plot will take
    into account different types of growth (overnight, fixed)
    as well as penalties (violations).

    params
    ------
    trials_df : DataFrame
        trials dataframe generated by create_trials_df() for a single
        animal on a single date with trials as row index
    save_out : bool (default=False)
        whether to save out the figure
    save_path : str (default=None)
        path to save the figure to
    """
    layout = """
        AAABCDDD
        EEEFGHIJ
        KKKLMNNN
        OOOPQRRR
        SSSTUVVV
    """
    fig = plt.figure(constrained_layout=True, figsize=(30, 20))

    plt.suptitle(
        f"\n{trials_df.animal_id.iloc[0]} on {trials_df.date.iloc[0]}\n",
        fontweight="semibold",
    )
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    # identify_axes(ax_dict) # prints the letter for id

    ## ROW 1
    plot_results(trials_df, ax=ax_dict["A"])
    plot_result_summary(trials_df, ax=ax_dict["B"])
    plot_watering_amounts(trials_df, ax=ax_dict["C"])
    FG.plot_cpoke_dur_distributions(trials_df, ax=ax_dict["D"])

    ## ROW 2
    plot_correct_side(trials_df, ax=ax_dict["E"])
    plot_stage_info(trials_df, ax=ax_dict["E"])
    plot_side_bias_summary(trials_df, ax=ax_dict["F"])
    plot_side_count_summary(trials_df, ax=ax_dict["G"])
    plot_n_settling_ins(trials_df, ax=ax_dict["H"])
    FG.plot_avg_failed_cpoke_dur(trials_df, ax=ax_dict["I"])
    FG.plot_avg_valid_cpoke_dur(trials_df, ax=ax_dict["J"])

    ## ROW 3
    plot_performance_rates(trials_df, ax=ax_dict["K"])
    plot_first_spoke_summary_by_loc_and_result(trials_df, ax=ax_dict["L"])
    plot_first_spokes_summary_by_correct_side_and_loc(trials_df, ax=ax_dict["M"])
    plot_give_info(trials_df, ax=ax_dict["N"])

    ## ROW 4
    plot_antibias_r_probs(trials_df, ax=ax_dict["O"])
    plot_npokes_summary(trials_df, ax=ax_dict["P"])
    plot_active_trial_dur_summary(trials_df, ax=ax_dict["Q"])
    plot_trial_dur(trials_df, ax=ax_dict["R"])

    ## ROW 5
    FG.plot_cpoke_dur_over_trials(trials_df, ax=ax_dict["S"])
    plot_ncpokes_over_trials(trials_df, ax=ax_dict["V"])

    if save_out:
        plt.savefig(save_path, bbox_inches="tight")
        plt.close("all")
    else:
        plt.show()

    return None


######################################################################################
#########                        MULTI DAY PLOTS                             #########
######################################################################################


def over_days_summary_spoke(animal_id, animal_days_df, animal_trials_df):
    """
    params
    ------
    animal_id : str
        animal id to plot, e.g. "R610"
    days_df : pd.DataFrame
        days dataframe created by create_days_df_from_dj() with
        day as row index
    trials_df : pd.DataFrame
        trials dataframe created by create_trials_df_from_dj() with
        trial as row index
    """

    layout = """
    AAABBBCCC
    DDDEEEFFF
    GGGHHHIII
    JJJKKKLLL
    MMMNNNOOO
    """
    letters = sorted(list(set(layout.replace("\n", "").replace(" ", ""))))
    bar_plots = list("CIL")  # manual input axes with bar plots
    bottom_row = letters[-3:]

    exp_condition = animal_trials_df.fix_experiment.iloc[-1]

    fig = plt.figure(constrained_layout=True, figsize=(30, 20))
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    plt.suptitle(
        f"{exp_condition} Condition | {animal_id} Daily Summary Plot",
        fontweight="semibold",
    )

    ## ROW 1- rig/techsession/foodpuck -- mass -- water
    plot_stage(animal_trials_df, ax_dict["A"], title="Stage")
    plot_mass(animal_days_df, ax_dict["B"], title="Mass")
    plot_water_restriction(animal_days_df, ax_dict["C"], title="Water", legend=False)

    ## ROW 2- stage -- run time --trials
    plot_rig_tech_foodpuck(animal_days_df, ax_dict["D"], title="Tech & Rig Info")
    plot_trials(animal_days_df, ax_dict["E"], title="Trials", legend=True)
    plot_run_time(animal_days_df, ax_dict["F"], title="Run Time")
    ax_dict["F"].set_title("Run Time")

    ## ROW 3- perf -- perf bars -- ?
    plot_curriculum_and_give_types(
        animal_trials_df, ax_dict["G"], title="Curriculum & Give Types"
    )
    plot_performance(animal_days_df, ax_dict["H"], title="Performance")
    plot_performance_bars(animal_trials_df, ax_dict["I"], title="Performance")

    ## ROW 4 - side bias -- antibias -- side bias params
    plot_side_bias(animal_days_df, ax_dict["J"], title="Side Bias")
    plot_antibias_probs(animal_trials_df, ax_dict["K"], title="Antibias")
    plot_sidebias_params(animal_trials_df, ax_dict["L"], title="Side Bias Params")

    ## ROW 5 - inter trial stats -- time to spoke - give type/curriculum/condition
    plot_trial_durs(animal_trials_df, ax_dict["M"], title="Trial Dur Stats")
    plot_time_to_spoke(animal_trials_df, ax_dict["N"], title="Time to Spoke")

    pu.adjust_mosaic_axes(ax_dict, letters, bar_plots, bottom_row, animal_days_df)


def over_days_summary_cpoke_learning(animal_id, animal_days_df, animal_trials_df):
    """
    params
    ------
    animal_id : str
        animal id to plot, e.g. "R610"
    days_df : pd.DataFrame
        days dataframe created by create_days_df_from_dj() with
        day as row index
    trials_df : pd.DataFrame
        trials dataframe created by create_trials_df_from_dj() with
        trial as row index

    # TODO
    8. Min/Max Deltas
    9. Fix Dur Delta Over Days

    """

    layout = """
    AAABBBCCC
    DDDEEEFFF
    GGGHHHIII
    JJJKKKLLL
    MMMNNNOOO
    PPPQQQRRR
    SSSTTTUUU
    """
    letters = sorted(list(set(layout.replace("\n", "").replace(" ", ""))))
    bar_plots = list(
        "CILOR"
    )  # manual input axes with cat plots (sns.boxplot or pandas bar)
    bottom_row = letters[-3:]

    exp_condition = animal_trials_df.fix_experiment.iloc[-1]

    fig = plt.figure(constrained_layout=True, figsize=(30, 25))
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to

    current_stage = animal_trials_df.stage.iloc[-1]
    if current_stage >= 11:
        plt.suptitle(
            f"------------------- EXP COMPLETE {exp_condition} Condition | {animal_id} |------------------- ",
            fontweight="semibold",
        )
    else:
        plt.suptitle(
            f"{exp_condition} Condition | {animal_id} Daily Summary Plot",
            fontweight="semibold",
        )

    ## ROW 1- rig/techsession/foodpuck -- mass -- water
    plot_stage(animal_trials_df, ax_dict["A"], title="Stage")
    plot_mass(animal_days_df, ax_dict["B"], title="Mass")
    plot_water_restriction(animal_days_df, ax_dict["C"], title="Water", legend=False)

    ## ROW 2- stage -- run time --trials
    plot_rig_tech_foodpuck(animal_days_df, ax_dict["D"], title="Tech & Rig Info")
    plot_trials(animal_days_df, ax_dict["E"], title="Trials", legend=True)
    plot_run_time(animal_days_df, ax_dict["F"], title="Run Time")

    ## ROW 3- perf -- perf bars -- ?
    plot_curriculum_and_give_types(
        animal_trials_df, ax_dict["G"], title="Curriculum & Give Types"
    )
    plot_performance(animal_days_df, ax_dict["H"], title="Performance")
    plot_performance_bars(animal_trials_df, ax_dict["I"], title="Performance")

    ## ROW 4 - side bias -- antibias -- side bias params
    plot_side_bias(animal_days_df, ax_dict["J"], title="Side Bias")
    plot_antibias_probs(animal_trials_df, ax_dict["K"], title="Antibias")
    plot_sidebias_params(animal_trials_df, ax_dict["L"], title="Side Bias Params")

    ## ROW 5 - inter trial stats -- time to spoke - give type/curriculum/condition
    plot_trial_durs(animal_trials_df, ax_dict["M"], title="Trial Dur Stats")
    plot_time_to_spoke(animal_trials_df, ax_dict["N"], title="Time to Spoke")
    FG.plot_trial_structure(animal_trials_df, ax_dict["O"], title="Trial Structure")

    ## ROW 6 - failure rates -- n settling ins/trial -- min/max deltas

    FG.plot_failed_fixation_rate_ods(
        animal_trials_df,
        ax=ax_dict["P"],
        title="Failed Fixation Rate",
    )
    plot_n_settling_ins_days(animal_trials_df, ax_dict["Q"], title="N Settling Ins")
    FG.plot_fixation_dur_box_plot(
        animal_trials_df, ax_dict["R"], title="Fixation Durations"
    )

    ## ROW 7 - cpoke dur raw -- cpoke dur relative -- delta over days
    FG.plot_cpoke_fix_stats_raw(
        animal_trials_df, ax_dict["S"], title="Cpoke Fix Dur Raw"
    )
    FG.plot_cpoke_fix_stats_relative(
        animal_trials_df, ax_dict["T"], title="Cpoke Fix Dur Relative"
    )
    FG.plot_delta_fixation_dur(
        animal_trials_df, ax_dict["U"], title="Fix Dur Delta Over Days"
    )

    pu.adjust_mosaic_axes(ax_dict, letters, bar_plots, bottom_row, animal_days_df)
