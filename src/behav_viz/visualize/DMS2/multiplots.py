"""
Author: Jess Breda
Date: July 17, 2024
Description: given days and trial table info make multi-plot
summaries on the scale of both a single day as well as 
multiple days. Specific to DMS2 protocol.
"""

import matplotlib.pyplot as plt

from behav_viz.visualize.plot_days_info import *
from behav_viz.visualize.plot_trials_info import *

from behav_viz.visualize.multiplots import multiplot_spoke_lg

import behav_viz.visualize.DMS2.plots as DMS2

from pathlib import Path


######################################################################################
#########                        SINGLE DAY PLOTS                            #########
######################################################################################


def single_day_summary(df, figures_path, save_out=True, overwrite=False):
    """
    function to plot summaries for each animal, day in a df of
    trials data

    df : pd.DataFrame
        df of trials data loaded in using `create_trials_df_from_dj`
    figures_path : Path object
        path to save figures to
    overwrite : bool (optional, default = False)
        whether to overwrite existing figures with same name
    """
    for (date, animal_id), sub_df in df.groupby(["date", "animal_id"]):
        # generate path & make plot if it doesn't exist or overwrite is on
        # TODO update logic here if fig dir structure changes
        fig_name = f"{animal_id}_{date}_day_summary.png"
        full_path = figures_path / fig_name

        if not Path.exists(full_path) or overwrite:
            print(f"making {fig_name[:-4]}")

            ## Early spoke only stages
            if sub_df.SMA_set.iloc[0] == "spoke":
                # TODO add give plot to this
                print(animal_id, date, "spoke only stage")
                multiplot_spoke_lg(sub_df, save_out=save_out, save_path=full_path)

            ## Later cpoke stages
            elif sub_df.SMA_set.iloc[0] == "cpoke":
                ## Cpoke stages without sounds
                if not sub_df.stimuli_on.iloc[-1]:
                    # this determines how to calculate things related to center poking
                    # durations. if the animal is in the settling in stage, then violations
                    # don't exist. in more advanced stages, violations turn on
                    if sub_df.delay_dur.iloc[-1] <= 0.001:
                        mode = "settling_in"
                    else:
                        mode = "violations"
                    multiplot_cpoke_pre_sounds(
                        sub_df, mode=mode, save_out=save_out, save_path=full_path
                    )

                ## Cpoke stage with sounds introduced, but no rule yet
                elif (
                    sub_df.stimuli_on.iloc[-1]
                    and sub_df.stimulus_dur.max() > 0.001
                    and sub_df.stage.iloc[0] == 9
                ):
                    mutliplot_cpoke_sounds_on(
                        sub_df,
                        save_out=save_out,
                        save_path=full_path,
                    )
                elif sub_df.stage.iloc[0] == 10 or sub_df.stage.iloc[0] == 11:
                    mutliplot_cpoke_decrease_give(
                        sub_df,
                        save_out=save_out,
                        save_path=full_path,
                    )
                elif sub_df.stage.iloc[0] > 11:
                    mutliplot_cpoke_pro_anti(
                        sub_df,
                        save_out=save_out,
                        save_path=full_path,
                    )
                else:
                    print("in cpoke stage but doesn't fit plot logic!")
            else:
                print("not in spoke or cpoke stage!")


# Pre sounds- typically stage 5-8 (spoke are 1-4)
def multiplot_cpoke_pre_sounds(
    trials_df, mode="settling_in", save_out=False, save_path=None
):
    """
    generate summary plot for cpoke stages when sounds are not yet being
    played. For most of these stages, violations are not a thing- the
    trial starts if the animal makes it through settling in dur and then
    the go sound will play. In the final stage, violations turn on and
    this is modulated by the "mode" param.

    params
    ------
    trials_df : DataFrame
        trials dataframe generated by create_trials_df() for a single
        animal on a single date with trials as row index
    mode : str (default="settling_in")
        whether to plot cpoke distributions for settling in or violations
        based on the stage the animal was in
    save_out : bool (default=False)
        whether to save out the figure
    save_path : str (default=None)
        path to save the figure to
    """
    layout = """
        AAABCDDD
        EEEFGHIJ
        KKKLMNNN
        OOOPQRRR
        SSSTUVVV
    """
    fig = plt.figure(constrained_layout=True, figsize=(30, 20))

    plt.suptitle(
        f"\n{trials_df.animal_id.iloc[0]} on {trials_df.date.iloc[0]}\n",
        fontweight="semibold",
    )
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    # identify_axes(ax_dict) # prints the letter for id

    ## ROW 1
    plot_results(trials_df, ax=ax_dict["A"])
    plot_result_summary(trials_df, ax=ax_dict["B"])
    # plot_watering_amounts(trials_df, ax=ax_dict["C"])
    DMS2.plot_cpoke_dur_distributions(trials_df, ax=ax_dict["D"], mode=mode)

    ## ROW 2
    plot_correct_side(trials_df, ax=ax_dict["E"])
    plot_stage_info(trials_df, ax=ax_dict["E"])
    try:
        plot_side_bias_summary(trials_df, ax=ax_dict["F"])
    except:
        pass
    plot_side_count_summary(trials_df, ax=ax_dict["G"])
    try:
        plot_n_settling_ins(trials_df, ax=ax_dict["H"])
        DMS2.plot_avg_failed_cpoke_dur(trials_df, ax=ax_dict["I"], mode=mode)
    except:
        print("skipping failed cpokes plots due to hist error")
    DMS2.plot_avg_valid_cpoke_dur(trials_df, ax=ax_dict["J"], mode=mode)

    ## ROW 3
    plot_performance_rates(trials_df, ax=ax_dict["K"])
    plot_first_spoke_summary_by_loc_and_result(trials_df, ax=ax_dict["L"])
    plot_first_spokes_summary_by_correct_side_and_loc(trials_df, ax=ax_dict["M"])
    plot_give_info(trials_df, ax=ax_dict["N"])

    ## ROW 4
    plot_antibias_r_probs(trials_df, ax=ax_dict["O"])
    plot_npokes_summary(trials_df, ax=ax_dict["P"])
    plot_active_trial_dur_summary(trials_df, ax=ax_dict["Q"])
    plot_trial_dur(trials_df, ax=ax_dict["R"])

    ## ROW 5
    DMS2.plot_cpoke_dur_over_trials(trials_df, ax=ax_dict["S"], mode=mode)
    plot_ncpokes_over_trials(trials_df, ax=ax_dict["V"])
    if save_out:
        plt.savefig(save_path, bbox_inches="tight")
        plt.close("all")
    else:
        plt.show()

    return None


# Sound on- typically stage 9
def mutliplot_cpoke_sounds_on(trials_df, save_out=False, save_path=None):
    """
    generate summary plot for cpoke stages sounds are just being turned on
    the key thing to visualize here is the duration of the sound stimuli
    relative to the delay & the violation rate wrt periods

    params
    ------
    trials_df : DataFrame
        trials dataframe generated by create_trials_df() for a single
        animal on a single date with trials as row index
    save_out : bool (default=False)
        whether to save out the figure
    save_path : str (default=None)
        path to save the figure to
    """
    layout = """
        AAABCDDD
        EEEFGHIJ
        KKKLMNNN
        OOOPQRRR
        SSSTUVVV
    """
    fig = plt.figure(constrained_layout=True, figsize=(30, 20))

    plt.suptitle(
        f"\n{trials_df.animal_id.iloc[0]} on {trials_df.date.iloc[0]}\n",
        fontweight="semibold",
    )
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    # identify_axes(ax_dict) # prints the letter for id

    ## ROW 1
    plot_results(trials_df, ax=ax_dict["A"])
    plot_result_summary(trials_df, ax=ax_dict["B"])
    plot_watering_amounts(trials_df, ax=ax_dict["C"])
    DMS2.plot_cpoke_dur_distributions(trials_df, ax=ax_dict["D"], mode="violations")

    ## ROW 2
    plot_correct_side(trials_df, ax=ax_dict["E"])
    plot_stage_info(trials_df, ax=ax_dict["E"])
    plot_side_bias_summary(trials_df, ax=ax_dict["F"])
    plot_side_count_summary(trials_df, ax=ax_dict["G"])
    plot_n_settling_ins(trials_df, ax=ax_dict["H"])
    DMS2.plot_avg_failed_cpoke_dur(trials_df, ax=ax_dict["I"], mode="violations")
    DMS2.plot_avg_valid_cpoke_dur(trials_df, ax=ax_dict["J"], mode="violations")

    ## ROW 3
    plot_performance_rates(trials_df, ax=ax_dict["K"])
    plot_first_spoke_summary_by_loc_and_result(trials_df, ax=ax_dict["L"])
    plot_first_spokes_summary_by_correct_side_and_loc(trials_df, ax=ax_dict["M"])
    plot_violations_by_period(trials_df, ax=ax_dict["N"])
    # plot_give_info(trials_df, ax=ax_dict["N"])

    ## ROW 4
    plot_npokes(trials_df, ax=ax_dict["O"])
    plot_npokes_summary(trials_df, ax=ax_dict["P"])
    plot_give_count_summary(trials_df, ax=ax_dict["Q"])
    plot_stimulus_and_delay_durations(trials_df, ax=ax_dict["R"])

    ## ROW 5
    DMS2.plot_cpoke_dur_over_trials(trials_df, ax=ax_dict["S"], mode="violations")
    plot_stim_grid_performance(trials_df, ax=ax_dict["T"], mode="violations")
    plot_active_trial_dur_summary(trials_df, ax=ax_dict["U"])
    plot_trial_dur(trials_df, ax=ax_dict["V"])

    plot_ncpokes_over_trials(trials_df, ax=ax_dict["V"])
    if save_out:
        plt.savefig(save_path, bbox_inches="tight")
        plt.close("all")
    else:
        plt.show()

    return None


# Give decrease- typically stage 10-11
def mutliplot_cpoke_decrease_give(trials_df, save_out=False, save_path=None):
    """
    generate summary plot for cpoke stages when the give is being
    probablistically decreased and sound rule learning starts

    params
    ------
    trials_df : DataFrame
        trials dataframe generated by create_trials_df() for a single
        animal on a single date with trials as row index
    save_out : bool (default=False)
        whether to save out the figure
    save_path : str (default=None)
        path to save the figure to
    """
    layout = """
        AAABCDDD
        EEEFGHHH
        IIIJKLLL
        MMMNOPQR
        SSSTUVVV
    """
    fig = plt.figure(constrained_layout=True, figsize=(30, 20))

    plt.suptitle(
        f"\n{trials_df.animal_id.iloc[0]} on {trials_df.date.iloc[0]}\n",
        fontweight="semibold",
    )
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    # pu.identify_axes(ax_dict)  # prints the letter for id

    ## ROW 1
    plot_results(trials_df, ax=ax_dict["A"])
    plot_result_summary(trials_df, ax=ax_dict["B"])
    plot_watering_amounts(trials_df, ax=ax_dict["C"])
    DMS2.plot_cpoke_distributions(trials_df, ax=ax_dict["D"], mode="violations")

    ## ROW 2
    plot_correct_side(trials_df, ax=ax_dict["E"])
    plot_stage_info(trials_df, ax=ax_dict["E"])
    plot_side_bias_summary(trials_df, ax=ax_dict["F"])
    plot_side_count_summary(trials_df, ax=ax_dict["G"])
    plot_violations_by_period(trials_df, ax=ax_dict["H"])

    ## ROW 3
    plot_performance_rates(trials_df, ax=ax_dict["I"])
    plot_first_spoke_summary_by_loc_and_result(trials_df, ax=ax_dict["J"])
    plot_first_spokes_summary_by_correct_side_and_loc(trials_df, ax=ax_dict["K"])
    DMS2.plot_cpoke_dur_over_trials(trials_df, ax=ax_dict["L"], mode="violations")

    ## ROW 4
    plot_give_info(trials_df, ax=ax_dict["M"])
    try:
        plot_stim_grid_performance(trials_df, ax=ax_dict["N"], mode="hits")
        plot_stim_grid_performance(trials_df, ax=ax_dict["O"], mode="violations")
        plot_hit_rate_by_give(trials_df, ax=ax_dict["Q"])
    except:
        print("skipping stim/give plots due to hist error")
    plot_result_by_give(trials_df, ax=ax_dict["P"])
    plot_npokes_summary(trials_df, ax=ax_dict["R"])

    ## ROW 5
    plot_antibias_r_probs(trials_df, ax=ax_dict["S"])
    try:
        plot_stim_grid_performance(
            trials_df.query("give_type_imp == 'none'"),
            ax=ax_dict["T"],
            mode="hits",
            title="Non-Give perf",
        )
        plot_stim_grid_performance(
            trials_df.query("give_type_imp == 'none'"),
            ax=ax_dict["U"],
            mode="violations",
            title="Non-Give perf",
        )
    except:
        print("skipping stim grid plots due to hist error")
    plot_trial_dur(trials_df, ax=ax_dict["V"])

    if save_out:
        plt.savefig(save_path, bbox_inches="tight")
        plt.close("all")
    else:
        plt.show()

    return None


# Pro Anti- typically stage 12+
def mutliplot_cpoke_pro_anti(trials_df, save_out=False, save_path=None):
    """
    generate summary plot for cpoke stages when pro-anti is on

    params
    ------
    trials_df : DataFrame
        trials dataframe generated by create_trials_df() for a single
        animal on a single date with trials as row index
    save_out : bool (default=False)
        whether to save out the figure
    save_path : str (default=None)
        path to save the figure to
    """
    layout = """
        AAABCDDD
        EEEFGHHH
        IIIJKLLL
        MMMNOPQR
        SSSTUVVV
        WWWXYZZZ
    """
    fig = plt.figure(constrained_layout=True, figsize=(30, 22))

    plt.suptitle(
        f"\n{trials_df.animal_id.iloc[0]} on {trials_df.date.iloc[0]}\n",
        fontweight="semibold",
    )
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    # pu.identify_axes(ax_dict)  # prints the letter for id

    # check to make sure animal isn't in pro only mode (no anti trials)
    # and skip the anti specific plots if so
    if (
        "anti" in trials_df["pro_anti_block_type"].unique()
        and trials_df.give_delay_dur.nunique() > 2
    ):
        mode = "make_give_dur_plots"
    else:
        mode = "skip_give_dur_plots"

    ## ROW 1
    plot_results(trials_df, ax=ax_dict["A"])
    plot_result_summary(trials_df, ax=ax_dict["B"])
    plot_watering_amounts(trials_df, ax=ax_dict["C"])
    DMS2.plot_cpoke_distributions(trials_df, ax=ax_dict["D"], mode="violations")

    ## ROW 2
    plot_correct_side(trials_df, ax=ax_dict["E"])
    plot_stage_info(trials_df, ax=ax_dict["E"])
    try:
        plot_side_bias_summary(trials_df, ax=ax_dict["F"])
        plot_side_count_summary(trials_df, ax=ax_dict["G"])
        plot_violations_by_period(trials_df, ax=ax_dict["H"])
    except:
        print("skipping violations by period due to hist error")

    ## ROW 3
    plot_performance_rates(trials_df, ax=ax_dict["I"])
    try:
        plot_first_spoke_summary_by_loc_and_result(trials_df, ax=ax_dict["J"])
        plot_first_spokes_summary_by_correct_side_and_loc(trials_df, ax=ax_dict["K"])
        DMS2.plot_cpoke_dur_over_trials(trials_df, ax=ax_dict["L"], mode="violations")
    except:
        ("Skipping due to high violation rates")

    ## ROW 4
    try:
        plot_rolling_hit_rate_by_pro_anti(trials_df, ax=ax_dict["M"])
        plot_stim_grid_performance(trials_df, ax=ax_dict["N"], mode="hits")
        plot_stim_grid_performance(trials_df, ax=ax_dict["O"], mode="violations")
        plot_hit_rate_by_give(trials_df, ax=ax_dict["Q"])  # todo swich to pa
    except:
        print("skipping stim/give plots due to hist error")
    plot_result_by_give(trials_df, ax=ax_dict["P"])  # todo switch to pa
    plot_npokes_summary(trials_df, ax=ax_dict["R"])

    ## ROW 5
    plot_rolling_hit_rate_by_stim(trials_df, ax=ax_dict["S"])
    plot_pro_anti_count_summary(trials_df, ax=ax_dict["T"])
    plot_hit_rate_by_pro_anti(trials_df, ax=ax_dict["U"])
    plot_trial_dur(trials_df, ax=ax_dict["V"])

    ## ROW 6
    try:
        plot_anti_give_del_metrics(trials_df, ax=ax_dict["W"])
    except:
        print("skipping anti give del metrics")
    if mode == "make_give_dur_plots":
        plot_anti_hit_rate_by_give_use(trials_df, ax=ax_dict["X"])
        plot_anti_hit_counts_by_give_use(trials_df, ax=ax_dict["Y"], legend=False)
    plot_antibias_r_probs(trials_df, ax=ax_dict["Z"])

    if save_out:
        plt.savefig(save_path, bbox_inches="tight")
        plt.close("all")
    else:
        plt.show()

    return None


######################################################################################
#########                        MULTI DAY PLOTS                             #########
######################################################################################


def over_days_summary_pre_pro_anti(animal_id, animal_days_df, animal_trials_df):
    """
    params
    ------
    animal_id : str
        animal id to plot, e.g. "R610"
    days_df : pd.DataFrame
        days dataframe created by create_days_df_from_dj() with
        day as row index
    trials_df : pd.DataFrame
        trials dataframe created by create_trials_df_from_dj() with
        trial as row index

    """
    layout = """
        AAABBBCCC
        DDDEEEFFF
        GGGHHHIII
        JJJKKKLLL
        MMMNNNOOO
    """
    letters = list(set(layout.replace("\n", "").replace(" ", "")))
    letters.sort()
    bar_plots = list("CEIL")  # manual input axes with bar plots
    bottom_row = letters[-3:]

    fig = plt.figure(constrained_layout=True, figsize=(30, 20))
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    plt.suptitle(f"{animal_id} Daily Summary Plot", fontweight="semibold")

    # determine training stage info
    current_stage = animal_trials_df.stage.iloc[-1]
    current_sma = animal_trials_df.SMA_set.iloc[-1]

    ## ROW 1
    plot_trials(animal_days_df, ax_dict["A"], title="Trials", legend=True)
    plot_mass(animal_days_df, ax_dict["B"], title="Mass")
    plot_water_restriction(
        animal_days_df,
        ax_dict["C"],
        title="Water",
        legend=False,
    )

    ## ROW 2
    plot_performance(animal_days_df, ax_dict["D"], title="Performance")
    plot_performance_bars(animal_trials_df, ax_dict["E"], title="Performance")
    plot_stage(animal_trials_df, ax_dict["F"], title="Stage")

    ## ROW 3
    plot_side_bias(animal_days_df, ax_dict["G"], title="Side Bias")
    plot_antibias_probs(animal_trials_df, ax_dict["H"], title="Antibias")
    plot_sidebias_params(animal_trials_df, ax_dict["I"], title="Side Bias Params")

    ## ROW 4
    if current_stage == 9:
        plot_sounds_info(animal_trials_df, ax_dict["J"], title="Sounds")
    elif current_stage == 10 or current_stage == 11:
        plot_performance_by_stim_over_days(
            animal_trials_df,
            without_give=True,
            ax=ax_dict["J"],
            title="Non-Give Perf",
        )
    else:
        plot_time_to_spoke(animal_trials_df, ax_dict["J"], title="Time to Spoke")
    # j is perf either by give or stim depd
    # k stays, # l becomes timing
    # k cpoke dur, # l timing
    # m becomes give metric or pro/anti perf
    # n is multi cpokes or pro/anti
    # o is rig/tech
    if current_sma == "cpoke":
        plot_cpoke_dur_timings_pregnp(animal_trials_df, ax_dict["K"], title="Cpoke Dur")
        plot_trial_structure(animal_trials_df, ax_dict["L"], title="Trial Structure")

    ## ROW 5
    if current_sma == "cpoke":
        if current_stage == 10 or current_stage == 11:
            plot_performance_by_give(
                animal_trials_df, ax_dict["M"], title="Give Metrics"
            )

            plot_n_cpokes_and_multirate(
                animal_trials_df, ax_dict["N"], title="Multi Cpokes"
            )
        else:
            plot_give_info_days(
                animal_trials_df,
                ax_dict["M"],
                title="Give Type",
                legend=False,
            )
            plot_n_cpokes_and_multirate(
                animal_trials_df, ax_dict["N"], title="Multi Cpokes"
            )

    plot_rig_tech(animal_days_df, ax_dict["O"], title="Rig Tech")

    pu.adjust_mosaic_axes(ax_dict, letters, bar_plots, bottom_row, animal_days_df)

    return None


def over_days_summary_pro_anti(animal_id, animal_days_df, animal_trials_df):
    """
    params
    ------
    animal_id : str
        animal id to plot, e.g. "R610"
    days_df : pd.DataFrame
        days dataframe created by create_days_df_from_dj() with
        day as row index
    trials_df : pd.DataFrame
        trials dataframe created by create_trials_df_from_dj() with
        trial as row index

    """
    layout = """
        AAABBBCCC
        DDDEEEFFF
        GGGHHHIII
        JJJKKKLLL
        MMMNNNOOO
        PPPQQQRRR
        SSSTTTUUU
    """

    letters = list(set(layout.replace("\n", "").replace(" ", "")))
    letters.sort()
    bar_plots = list("CEIL")  # manual input axes with bar plots
    bottom_row = letters[-3:]

    fig = plt.figure(constrained_layout=True, figsize=(30, 25))
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    plt.suptitle(f"{animal_id} Daily Summary Plot", fontweight="semibold")

    # determine training stage info
    current_stage = animal_trials_df.stage.iloc[-1]
    current_sma = animal_trials_df.SMA_set.iloc[-1]
    latest_date = animal_trials_df.date.iloc[-1]

    if animal_trials_df.query("date == @latest_date").give_delay_dur.nunique() > 2:
        plot_give_del_info = True
    else:
        plot_give_del_info = False

    ## ROW 1
    plot_trials(animal_days_df, ax_dict["A"], title="Trials", legend=True)
    plot_mass(animal_days_df, ax_dict["B"], title="Mass")
    plot_water_restriction(animal_days_df, ax_dict["C"], title="Water", legend=False)

    ## ROW 2
    plot_performance(animal_days_df, ax_dict["D"], title="Performance")
    plot_performance_bars(animal_trials_df, ax_dict["E"], title="Performance")
    plot_stage(animal_trials_df, ax_dict["F"], title="Stage")

    ## ROW 3
    plot_side_bias(animal_days_df, ax_dict["G"], title="Side Bias")
    plot_antibias_probs(animal_trials_df, ax_dict["H"], title="Antibias")
    plot_sidebias_params(animal_trials_df, ax_dict["I"], title="Side Bias Params")

    ## ROW 4- JKL
    plot_performance_by_stim_over_days(
        animal_trials_df,
        without_give=False,
        ax=ax_dict["J"],
        title="Stim Perf",
        confidence_intervals=False,
    )
    try:
        plot_performance_by_stim_over_days(
            animal_trials_df,
            without_give=True,
            ax=ax_dict["K"],
            title="Non-Give Stim Perf",
        )
    except:
        plot_performance_by_stim_over_days(
            animal_trials_df,
            without_give=True,
            ax=ax_dict["K"],
            title="Non-Give Stim Perf",
            confidence_intervals=False,
        )

    plot_trial_structure(animal_trials_df, ax_dict["L"], title="Trial Structure")

    ## ROW 5- MNO
    plot_performance_by_pro_anti_over_days(
        animal_trials_df,
        without_give=False,
        ax=ax_dict["M"],
        title=f"Pro: {animal_trials_df.pro_stim_set.dropna().unique()[0]},Anti: {animal_trials_df.anti_stim_set.dropna().unique()[0]}",
        rotate_x_labels=not (plot_give_del_info),
    )

    # TODO logic here for if switching is happning over days or sessions
    plot_n_pro_anti_blocks_days(
        animal_trials_df, ax_dict["N"], title="N Pro Anti Blocks"
    )
    plot_cpoke_dur_timings_pregnp(animal_trials_df, ax_dict["O"], title="Cpoke Dur")

    ## ROW 6- PQR

    if plot_give_del_info:
        plot_give_delay_dur_days(
            animal_trials_df, ax=ax_dict["P"], title="Anti Give Delay Dur"
        )

    plot_block_switch_params(
        animal_trials_df, ax_dict["Q"], title="Block Switch Params"
    )

    plot_performance_by_give(animal_trials_df, ax_dict["R"], title="Perf by Give")

    ## ROW 7- STU
    if plot_give_del_info:
        plot_give_use_rate_days(
            animal_trials_df,
            ax_dict["S"],
            title=f"Anti Give Use Rate, $\\alpha_-$= {animal_trials_df.give_del_adagrow_alpha_minus.iloc[-1]}",
        )
    plot_give_type_and_block_switch_days(
        animal_trials_df, ax_dict["T"], title="Block Switch & Give Type"
    )
    plot_rig_tech(animal_days_df, ax_dict["U"], title="Rig Tech")

    pu.adjust_mosaic_axes(ax_dict, letters, bar_plots, bottom_row, animal_days_df)

    return None
