"""
Author: Jess Breda
Date: July 12, 2023
Description: given days, trials table info make summary plots
for an animal for a given day or across multiple
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from pathlib import Path

from plot_days_info import *
from plot_trials_info import *


######################
###   SINGLE DAY   ###
######################


def multiplot_single_day_summaries(df, figures_path, save_out=True, overwrite=False):
    """
    function to plot summaries for each animal, day in a df of
    trials data

    df : pd.DataFrame
        df of trials data loaded in using `create_trials_df_from_dj`
    figures_path : Path object
        path to save figures to
    overwrite : bool (optional, default = False)
        whether to overwrite existing figures with same name
    """
    for (date, animal_id), sub_df in df.groupby(["date", "animal_id"]):
        # generate path & make plot if it doesn't exist or overwrite is on
        # TODO update logic here if fig dir structure changes
        fig_name = f"{animal_id}_{date}_day_summary.png"
        full_path = figures_path / fig_name

        if not Path.exists(full_path) or overwrite:
            print(f"making {fig_name[:-4]}")

            if sub_df.SMA_set.iloc[-1] == "cpoke":
                if not sub_df.stimuli_on.iloc[-1]:
                    # in stage where animal is cpoking but not growing nose poke
                    multiplot_cpoke_pre_gnp(
                        sub_df, save_out=save_out, save_path=full_path
                    )
                else:
                    print(f"!!! plot not made yet!!!!")
            elif sub_df.SMA_set.iloc[-1] == "spoke":
                multiplot_spoke_lg(sub_df, save_out=save_out, save_path=full_path)


#### CURRICULA / STAGE SPECIFIC PLOTS ####


def multiplot_cpoke_pre_gnp(trials_df, save_out=False, save_path=None):
    """
    generate summary plot for cpoke stages pre grow nose poke where
    the settling in dur times the trial. violations are not a thing- the
    trial starts if the animal makes it through settling in dur and then
    the go sound will play.

    params
    ------
    trials_df : DataFrame
        trials dataframe generated by create_trials_df() for a single
        animal on a single date with trials as row index
    save_out : bool (default=False)
        whether to save out the figure
    save_path : str (default=None)
        path to save the figure to
    """
    layout = """
        AAABCDDD
        EEEFGHIJ
        KKKLMNNN
        OOOPQRRR
        SSSTUVVV
    """
    fig = plt.figure(constrained_layout=True, figsize=(30, 20))

    plt.suptitle(
        f"\n{trials_df.animal_id.iloc[0]} on {trials_df.date.iloc[0]}\n",
        fontweight="semibold",
    )
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    # identify_axes(ax_dict) # prints the letter for id

    ## ROW 1
    plot_results(trials_df, ax=ax_dict["A"])
    plot_result_summary(trials_df, ax=ax_dict["B"])
    plot_watering_amounts(trials_df, ax=ax_dict["C"])
    plot_cpoke_distributions(trials_df, ax=ax_dict["D"], mode="settling_in")

    ## ROW 2
    plot_correct_side(trials_df, ax=ax_dict["E"])
    plot_stage_info(trials_df, ax=ax_dict["E"])
    plot_side_bias_summary(trials_df, ax=ax_dict["F"])
    plot_side_count_summary(trials_df, ax=ax_dict["G"])
    plot_n_failed_cpokes(trials_df, ax=ax_dict["H"])
    plot_avg_failed_cpoke_dur(trials_df, ax=ax_dict["I"])
    plot_avg_valid_cpoke_dur(trials_df, ax=ax_dict["J"])

    ## ROW 3
    plot_performance_rates(trials_df, ax=ax_dict["K"])
    plot_first_spoke_summary_by_loc_and_result(trials_df, ax=ax_dict["L"])
    plot_first_spokes_summary_by_correct_side_and_loc(trials_df, ax=ax_dict["M"])
    plot_give_info(trials_df, ax=ax_dict["N"])

    ## ROW 4
    plot_npokes(trials_df, ax=ax_dict["O"])
    plot_npokes_summary(trials_df, ax=ax_dict["P"])
    plot_active_trial_dur_summary(trials_df, ax=ax_dict["Q"])
    plot_trial_dur(trials_df, ax=ax_dict["R"])

    ## ROW 5
    plot_cpokes_over_trials(trials_df, ax=ax_dict["S"], mode="settling_in")
    plot_ncpokes_over_trials(trials_df, ax=ax_dict["V"])
    if save_out:
        plt.savefig(save_path, bbox_inches="tight")
        plt.close("all")
    else:
        plt.show()

    return None


def multiplot_spoke_lg(trials_df, save_out=False, save_path=None):
    """
    generate summary plot for spoke stages given a light guide (lg)
    curriculum

    params
    ------
    trials_df : DataFrame
        trials dataframe generated by create_trials_df() for a single
        animal on a single date with trials as row index
    save_out : bool (default=False)
        whether to save out the figure
    save_path : str (default=None)
        path to save the figure to
    """
    layout = """
        AAABC
        DDDEF
        GGGHI
        JJJKL
        MMMNP
    """
    fig = plt.figure(constrained_layout=True, figsize=(20, 20))

    plt.suptitle(
        f"\n{trials_df.animal_id.iloc[0]} on {trials_df.date.iloc[0]}\n",
        fontweight="semibold",
    )
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    # identify_axes(ax_dict) # prints the letter for id

    ## ROW 1
    plot_results(trials_df, ax=ax_dict["A"])
    plot_result_summary(trials_df, ax=ax_dict["B"])
    plot_watering_amounts(trials_df, ax=ax_dict["C"])

    ## ROW 2
    plot_correct_side(trials_df, ax=ax_dict["D"])
    plot_stage_info(trials_df, ax=ax_dict["D"])
    plot_side_bias_summary(trials_df, ax=ax_dict["E"])
    plot_side_count_summary(trials_df, ax=ax_dict["F"])

    ## ROW 3
    plot_performance_rates(trials_df, ax=ax_dict["G"])
    plot_first_spoke_summary_by_loc_and_result(trials_df, ax=ax_dict["H"])
    plot_first_spokes_summary_by_correct_side_and_loc(trials_df, ax=ax_dict["I"])

    ## ROW 4
    plot_npokes(trials_df, ax=ax_dict["J"])
    plot_npokes_summary(trials_df, ax=ax_dict["K"])
    # plot L here

    ## ROW 5
    plot_trial_dur(trials_df, ax=ax_dict["M"])
    plot_active_trial_dur_summary(trials_df, ax=ax_dict["N"])
    # plot P here

    if save_out:
        plt.savefig(save_path, bbox_inches="tight")
        plt.close("all")
    else:
        plt.show()

    return None


######################
###   MULTIDAY     ###
######################


def multiplot_multi_day_summary(animal_id, days_df, trials_df):
    """
    params
    ------
    animal_id : str
        animal id to plot, e.g. "R610"
    days_df : pd.DataFrame
        days dataframe created by create_days_df_from_dj() with
        day as row index
    trials_df : pd.DataFrame
        trials dataframe created by create_trials_df_from_dj() with
        trial as row index

    """
    layout = """
        AAABBBCCC
        DDDEEEFFF
        GGGHHHIII
        JJJKKKLLL
        MMMNNNOOO
    """
    fig = plt.figure(constrained_layout=True, figsize=(30, 20))
    ax_dict = fig.subplot_mosaic(layout)  # ax to plot to
    plt.suptitle(f"{animal_id} Daily Summary Plot", fontweight="semibold")

    animal_days_df = days_df.query("animal_id == @animal_id").copy()
    animal_trials_df = trials_df.query("animal_id == @animal_id").copy()

    ## ROW 1
    plot_trials(
        animal_days_df, ax_dict["A"], title="Trials", legend=True, xaxis_label=False
    )
    plot_mass(animal_days_df, ax_dict["B"], title="Mass", xaxis_label=False)
    plot_water_restriction(
        animal_days_df, ax_dict["C"], title="Water", legend=False, xaxis_label=False
    )

    ## ROW 2
    plot_performance(
        animal_days_df, ax_dict["D"], title="Performance", xaxis_label=False
    )
    plot_performance_bars(
        animal_trials_df, ax_dict["E"], title="Performance", xaxis_label=False
    )
    plot_stage(
        animal_trials_df,
        ax_dict["F"],
        title="Stage",
        xaxis_label=False,
    )

    ## ROW 3
    plot_side_bias(animal_days_df, ax_dict["G"], title="Side Bias", xaxis_label=False)
    plot_antibias_probs(
        animal_trials_df, ax_dict["H"], title="Antibias", xaxis_label=False
    )
    plot_sidebias_params(
        animal_trials_df, ax_dict["I"], title="Side Bias Params", xaxis_label=False
    )

    ## ROW 4
    plot_time_to_spoke(
        animal_trials_df, ax_dict["J"], title="Time to Spoke", xaxis_label=False
    )
    if trials_df.stage.max() >= 5:
        plot_cpoke_dur_timings_pregnp(
            animal_trials_df, ax_dict["K"], title="Cpoke Dur", xaxis_label=False
        )
        plot_n_cpokes_and_multirate(
            animal_trials_df, ax_dict["L"], title="Multi Cpokes", xaxis_label=False
        )

    ## ROW 5
    plot_trial_structure(
        animal_trials_df, ax_dict["M"], title="Trial Structure", xaxis_label=True
    )
    plot_rig_tech(animal_days_df, ax_dict["N"], title="Rig Tech", xaxis_label=True)

    return None
